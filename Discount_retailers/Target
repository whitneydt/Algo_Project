# Show imports
import numpy as np
import pandas as pd
import yfinance as yf
import hvplot.pandas
import plotly.graph_objs as go
from newsapi.newsapi_client import NewsApiClient
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from pathlib import Path
import os
from datetime import datetime, timedelta
import pandas as pd
import mplfinance as mpf
#pull data from yahoo finance
data =yf.download(tickers='TGT', period='max', interval = '1d', start='2007-01-01')
data
# Show Data
print(data)
# build dataframe
​
TGT_df = pd.DataFrame(data)
TGT_df.head(10)
​
# change df to csv
TGT_csv = TGT_df.to_csv('/users/manu/desktop/project_2/TGT_csv', index=True)
​
#Show the df
TGT_df.head(10)
​
#Show Close Only
TGT_close = TGT_df.drop(columns =['Open','High','Low','Adj Close','Volume'])
TGT_close.head(10)
TGT_returns = TGT_close.pct_change().dropna()
TGT_returns
# Access to the News Api
newsapi = NewsApiClient(api_key='ce3e78ab07ed4649a677e4da44c06a82')
# Set current date and the date from one month ago using the ISO format
current_date = pd.Timestamp(datetime.now(), tz="America/New_York").isoformat()
past_date = pd.Timestamp(datetime.now()- timedelta(30), tz="America/New_York").isoformat()
# Define a function to build news df
def create_df(news, language):
    articles = []
    for article in news:
        try:
            title = article["title"]
            description = article["description"]
            text = article["content"]
            date = article["publishedAt"][:10]
​
            articles.append({
                "title": title,
                "description": description,
                "text": text,
                "date": date,
                "language": language
            })
        except AttributeError:
            pass
​
    return pd.DataFrame(articles)
# Pull all the Target Stock headlines data from 2008 
TGT_news_en = newsapi.get_everything(
    q=" TGT AND Target AND 2008",
    language="en"
)
# Show the total number of news
print(TGT_news_en["totalResults"])
# Create a DataFrame with the Target News
TGT_en_df = create_df(TGT_news_en["articles"], "en")
TGT_en_df
# define  sentiment analysis  
TGT_sentiment = []
analyzer = SentimentIntensityAnalyzer()
​
for article in TGT_news_en['articles']:
    try:
        date = article["publishedAt"][:10]
        text = article["content"][0:198]
        sentiment = analyzer.polarity_scores(text)
        pos = sentiment['pos']
        neu = sentiment["neu"]
        neg = sentiment["neg"]
        compound = sentiment["compound"] 
        
        TGT_sentiment.append({
            "text": text,
            "date": date,
            "positive": pos,
            "neutral": neu,
            "negative": neg,
            "compound": compound 
        })
        
    except AttributeError:
        pass
# Build a SIA DF
TGT_S_df = pd.DataFrame(TGT_sentiment) 
cols = ['date', 'positive', 'neutral', 'negative', 'compound', 'text']
TGT_S_df = TGT_S_df[cols] 
TGT_S_df.describe()
#Display a candle stick chart
fig = go.Figure(data=[go.Candlestick(x=TGT_df.index,
                open=TGT_df['Open'],
                high=TGT_df['High'],
                low=TGT_df['Low'],
                close=TGT_df['Close'])])
​
fig.show()
​
